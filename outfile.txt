// printf("sorted finish in main\n");
	// for (int j = 0; tokens->commands[j]; j++)
	// {
	// 	printf("   <cmd %d name:> = %s\n", j, tokens->commands[j]->name);
	// 	for (int k = 0; tokens->commands[j]->args[k] ; k++){
	// 	printf("<cmd %d args %d:>  = %s\n", j, k, tokens->commands[j]->args[k]);
	// 	}
	// 	printf("\n\n");
	// }
	

		
	// printf("this has a pipe and we printing it\n\n");
	// for (int j = 0; tokens->pipes[j]; j++)
	// {
	// 	printf("	<pipe%d cmd1->name= > %s\n", j, tokens->pipes[j]->cmd1->name);
	// 	for (int k = 0; tokens->pipes[j]->cmd1->args[k] ; k++){
	// 	printf("<pipe%d cmd1->args%d: >  = %s\n", j, k, tokens->pipes[j]->cmd1->args[k]);
	// 	}
	// 	printf("\n");
	// 	printf("	<pipe%d cmd2->name= > %s\n", j, tokens->pipes[j]->cmd2->name);
	// 	for (int k = 0; tokens->pipes[j]->cmd2->args[k] ; k++){
	// 	printf("<pipe%d cmd2->args%d: > %s\n", j, k, tokens->pipes[j]->cmd2->args[k]);
	// 	}
	// 	printf("\n\n");
	// }

	// // printf("\n\n\n");

	// for (int j = 0; tokens->redirs[j]; j++)
	// {
	// 	printf("printing redir ====  %s\n", tokens->redirs[j]->file);
	// 	// for (int k = 0; tokens->command[j]->args[k] ; k++){
	// 	// printf("what are the args here = ; %s\n", tokens->command[j]);
	// }

	// printf("\n\n\n");